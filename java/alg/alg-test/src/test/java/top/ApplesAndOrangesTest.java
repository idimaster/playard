package top;

import org.junit.Test;

import static org.junit.Assert.assertEquals;

/**
 * Created by Dnitry on 6/11/2015.
 */
public class ApplesAndOrangesTest {
    @Test
    public void test1() {
        assertEquals(2, new ApplesAndOranges().maximumApples(3, 2, new int[0]));
    }

    @Test
    public void test2() {
        assertEquals(2, new ApplesAndOranges().maximumApples(10, 3, new int[]{3, 8}));
    }

    @Test
    public void test3() {
        assertEquals(5, new ApplesAndOranges().maximumApples(9, 4, new int[]{1, 4}));
    }

    @Test
    public void test4() {
        assertEquals(5, new ApplesAndOranges().maximumApples(9, 4, new int[]{1, 4}));
    }

    @Test
    public void test5() {
        assertEquals(4, new ApplesAndOranges().maximumApples(9, 4, new int[]{2, 4}));
    }

    @Test
    public void test6() {
        assertEquals(10, new ApplesAndOranges().maximumApples(23, 7, new int[] {3, 2, 9, 1, 15, 23, 20, 19}));
    }

    @Test
    public void test7() {
        int [] info = new int[] {1037, 866, 1024, 41, 1027, 165, 1452, 1267, 888, 1308, 988, 1494, 785, 473, 551, 536, 1060, 687, 155, 643, 377, 207, 946, 510, 264, 628, 680, 1079, 364, 46, 491, 1028, 595, 86, 1216, 485, 1285, 767, 845, 1276, 120, 171, 1379, 735, 512, 639, 345, 1378, 351, 881, 334, 997, 1302, 434, 1020, 755, 383, 323, 202, 548, 83, 1520, 105, 370, 1000, 765, 379, 135, 1353, 1055, 1148, 163, 740, 354, 431, 606, 182, 304, 407, 73, 1087, 322, 416, 985, 1226, 1453, 274, 784, 824, 357, 940, 626, 196, 1233, 1529, 1466, 79, 1061, 945, 412, 89, 195, 722, 1208, 1095, 1019, 1432, 864, 475, 294, 1398, 998, 635, 243, 1122, 1039, 944, 1193, 1493, 817, 992, 1416, 1200, 1066, 1431, 557, 417, 622, 1418, 1230, 331, 631, 1415, 724, 217, 376, 1217, 1126, 30, 394, 715, 1541, 625, 937, 1016, 474, 644, 591, 795, 57, 21, 1514, 279, 176, 747, 446, 1346, 928, 751, 177, 910, 1358, 140, 695, 1053, 670, 1228, 841, 1100, 1275, 48, 1284, 1172, 798, 1132, 803, 1221, 674, 1241, 614, 969, 1139, 464, 762, 133, 739, 1430, 468, 1234, 1484, 1469, 1097, 737, 975, 1517, 877, 697, 1288, 1409, 1519, 1099, 926, 675, 771, 316, 678, 1192, 930, 369, 813, 1309, 268, 489, 1287, 1176, 744, 137, 252, 833, 710, 388, 1042, 209, 72, 481, 303, 158, 1478, 25, 1093, 215, 38, 479, 442, 1033, 823, 638, 1252, 627, 599, 332, 1412, 1062, 248, 590, 230, 620, 1400, 363, 90, 1362, 1138, 1249, 636, 1094, 1117, 1403, 999, 1507, 853, 1278, 1129, 984, 1417, 650, 1377, 927, 1468, 1533, 224, 67, 821, 288, 1043, 1459, 1473, 1522, 1360, 1447, 1109, 1315, 240, 1310, 662, 931, 847, 1084, 1539, 453, 115, 459, 1196, 261, 1166, 292, 125, 1185, 799, 542, 1250, 317, 106, 1322, 1319, 257, 758, 1106, 1198, 312, 1029, 1115, 101, 1440, 989, 164, 1482, 934, 1392, 870, 117, 669, 1480, 732, 122, 242, 544, 516, 611, 440, 701, 523, 194, 827, 477, 890, 210, 507, 1121, 94, 773, 826, 1159, 974, 579, 301, 838, 1311, 546, 462, 973, 774, 1067, 277, 582, 214, 1365, 623, 565, 1163, 1153, 584, 1399, 1434, 753, 65, 1261, 278, 493, 543, 272, 99, 886, 9, 340, 482, 1209, 77, 1364, 805, 1213, 905, 894, 1467, 914, 1113, 883, 1177, 1359, 344, 1022, 54, 126, 1540, 534, 1133, 78, 81, 110, 390, 1532, 6, 180, 1036, 1246, 302, 1171, 232, 1382, 1086, 1111, 1237, 16, 1289, 1523, 1488, 652, 45, 1325, 1329, 314, 138, 226, 676, 834, 347, 406, 1151, 1272, 1295, 759, 143, 587, 814, 1277, 503, 897, 1356, 664, 1402, 205, 978, 451, 121, 342, 818, 124, 18, 1406, 1071, 941, 707, 1375, 29, 91, 348, 50, 501, 1462, 1242, 1298, 811, 1134, 825, 1058, 399, 1424, 250, 1070, 605, 1189, 352, 62, 1470, 1170, 149, 289, 1089, 1269, 1045, 1180, 107, 564, 567, 637, 1397, 777, 265, 1143, 466, 262, 1427, 1049, 520, 23, 1465, 157, 787, 1135, 1436, 711, 425, 1158, 549, 528, 159, 1396, 1002, 284, 55, 593, 1344, 467, 384, 1347, 562, 1218, 172, 1511, 1489, 281, 366, 852, 1063, 1444, 1191, 509, 458, 775, 1101, 1232, 706, 938, 253, 875, 663, 783, 1219, 1082, 980, 92, 855, 1300, 486, 574, 915, 899, 1492, 1150, 295, 511, 533, 356, 1245, 1215, 1348, 280, 1312, 385, 705, 884, 942, 684, 812, 1368, 959, 761, 768, 699, 1475, 659, 788, 756, 108, 1509, 208, 328, 573, 178, 231, 1186, 465, 558, 570, 1313, 1442, 714, 313, 947, 320, 1264, 193, 1178, 374, 568, 1146, 26, 355, 935, 1405, 1408, 1404, 134, 1332, 1118, 104, 704, 983, 1054, 1072, 306, 1142, 1342, 879, 84, 1316, 1064, 1385, 222, 1486, 691, 244, 1088, 922, 428, 1046, 725, 1238, 530, 153, 1461, 1299, 20, 1371, 531, 487, 387, 12, 305, 539, 1389, 373, 1443, 903, 736, 2, 1268, 882, 993, 410, 577, 405, 1040, 1390, 723, 515, 1373, 876, 97, 700, 148, 1318, 438, 419, 1026, 896, 902, 1144, 907, 939, 555, 189, 790, 800, 561, 819, 815, 970, 588} ;
        assertEquals(784, new ApplesAndOranges().maximumApples(1541, 641, info));
    }

    @Test
    public void test8() {
        int [] info = new int[] {641, 143, 64, 782, 214, 875, 346, 1246, 528, 1070, 246, 259, 548, 1010, 1090, 773, 249, 634, 1084, 739, 622, 1261, 1144, 982, 975, 415, 476, 1019, 906, 1099, 1184, 352, 998, 1213, 534, 145, 71, 936, 1263, 341, 892, 928, 43, 653, 800, 365, 1163, 356, 422, 742, 18, 454, 1160, 1223, 812, 771, 574, 990, 977, 1043, 575, 818, 7, 135, 1193, 283, 428, 386, 769, 13, 492, 1260, 2, 330, 1045, 1164, 61, 54, 1008, 313, 1181, 533, 1005, 716, 538, 1158, 1230, 199, 243, 1108, 587, 1142, 1180, 1100, 981, 529, 269, 1044, 256, 516, 888, 227, 683, 353, 826, 264, 874, 380, 503, 1041, 862, 205, 823, 632, 406, 290, 1107, 40, 29, 843, 120, 922, 65, 491, 720, 689, 331, 329, 567, 464, 523, 808, 379, 611, 22, 1257, 591, 969, 221, 1215, 1182, 758, 284, 1017, 20, 569, 128, 980, 654, 104, 551, 965, 730, 1187, 360, 573, 294, 1046, 342, 755, 1167, 949, 677, 46, 881, 1085, 1178, 282, 357, 399, 976, 598, 552, 1216, 617, 621, 87, 639, 1155, 606, 722, 844, 597, 177, 566, 277, 60, 1052, 391, 287, 334, 323, 902, 1096, 247, 1154, 665, 244, 1211, 774, 202, 485, 882, 388, 660, 605, 457, 885, 505, 1020, 612, 319, 39, 870, 490, 1120, 685, 314, 910, 681, 645, 729, 797, 4, 663, 788, 757, 801, 614, 471, 775, 673, 72, 695, 125, 166, 162, 23, 1233, 203, 241, 655, 1129, 237, 92, 1074, 662, 806, 307, 229, 447, 510, 822, 544, 418, 154, 1259, 983, 79, 877, 188, 478, 9, 1151, 1173, 298, 161, 225, 539, 1077, 1247, 456, 616, 498, 152, 1065, 57, 427, 1132, 222, 615, 285, 345, 272, 470, 1122, 293, 47, 767, 991, 705, 439, 992, 8, 432, 265, 728, 340, 1170, 886, 315, 1128, 36, 1022, 493, 747, 131, 766, 112, 953, 804, 652, 1104, 927, 310, 496, 571, 1226, 779, 311, 810, 440, 570, 1102, 631, 474, 413, 608, 349, 499, 148, 233, 419, 1248, 816, 396, 583, 15, 592, 1081, 1012, 1177, 85, 577, 1141, 325, 796, 952, 920, 737, 223, 643, 28, 100, 651, 193, 412, 90, 805, 727, 126, 385, 1253, 861, 1190, 150, 33, 151, 1033, 1112, 1189, 137, 291, 770, 304, 1243, 1146, 871, 504, 594, 482, 682, 102, 1066, 107, 750, 190, 584, 628, 1242, 1092, 1038, 688, 746, 178, 1229, 172, 996, 777, 397, 58, 175, 897, 813, 1069, 252, 423, 522, 165, 753, 1239, 1051, 798, 564, 519, 950, 430, 1116, 987, 889, 218, 425, 857, 297, 972, 701, 187, 669, 230, 473, 200, 14, 508, 819, 743, 811, 1110, 1114, 261, 563, 26, 610, 749, 947, 19, 1200, 180, 1048, 670, 262, 863, 867, 278, 459, 1119, 1003, 147, 679, 1168, 712, 984, 855, 155, 734, 322, 434, 475, 328, 206, 603, 536, 1212, 86, 869, 1134, 24, 201, 893, 224, 122, 362, 697, 600, 1097, 756, 923, 401, 303, 1138, 925, 1080, 266, 731, 501, 216, 242, 212, 568, 780, 192, 194, 350, 497, 937, 589, 407, 607, 511, 512, 48, 1106, 453, 1156, 394, 646, 103, 924, 253, 1039, 78, 1205, 891, 1209, 635, 231, 433, 326, 1053, 899, 257, 1241, 348, 993, 979, 1186, 316, 1256, 1194, 789, 21, 602, 854, 733, 864, 1166, 366, 1262, 629, 273, 1098, 411, 542, 236, 400, 752, 601, 378, 859, 907, 545, 160, 260, 633, 1202, 814, 1121, 790, 1078, 1172, 732, 706, 276, 726, 354, 994, 136, 876, 793, 333, 1185, 620, 375, 410, 671, 41, 384, 1101, 99, 1217, 852, 945, 1176, 1148, 17, 1183, 1029, 132, 803, 524, 1206, 847, 451, 799, 335, 51, 1087, 502, 296, 940, 251, 1007, 292, 926, 1068, 215, 1111, 52, 668, 664} ;
        assertEquals(635, new ApplesAndOranges().maximumApples(1263, 840, info));
    }

    @Test
    public void test9() {
        int [] info = new int[] {354, 437, 1098, 17, 52, 340, 9, 1039, 1385, 871, 166, 448, 738, 1187, 265, 747, 1366, 808, 571, 1038, 1234, 1209, 966, 517, 1085, 1376, 148, 674, 901, 399, 1140, 910, 1064, 776, 58, 1149, 488, 520, 1325, 1230, 1361, 1352, 752, 640, 297, 1239, 170, 1001, 386};
        assertEquals(687, new ApplesAndOranges().maximumApples(1396, 47, info));
    }

    @Test
    public void test10() {
        int [] info = new int[] {50, 21, 298, 340, 14, 119, 398, 41, 154, 1, 305, 267, 144, 386, 481, 473, 329, 184, 51, 294, 251, 22, 437, 137, 324, 142, 189, 68, 326, 509, 15, 100, 375, 84, 56, 231, 65, 314, 79, 526, 160, 174, 197, 429, 425, 75, 76, 527, 336, 203, 327, 313, 125, 159, 393, 482, 282, 192, 431, 544, 146, 353, 9, 456, 379, 67, 182, 396, 391, 220, 214, 208, 548, 218, 59, 188, 210, 494, 48, 23, 234, 454, 468, 132, 36, 344, 52, 532, 361, 302, 183, 551, 323, 493, 378, 2, 374, 276, 529} ;
        assertEquals(348, new ApplesAndOranges().maximumApples(556, 416, info));
    }

    @Test
    public void test11() {
        assertEquals(1, new ApplesAndOranges().maximumApples(2, 2, new int[]{}));
        assertEquals(1000, new ApplesAndOranges().maximumApples(2000, 2000, new int[]{2000}));
        assertEquals(2, new ApplesAndOranges().maximumApples(4, 4, new int[]{1, 4}));
        assertEquals(1000, new ApplesAndOranges().maximumApples(2000, 2, new int[]{}));
        assertEquals(1000, new ApplesAndOranges().maximumApples(1999, 2, new int[]{}));
        assertEquals(1050, new ApplesAndOranges().maximumApples(2000, 700, new int[]{}));
        assertEquals(1050, new ApplesAndOranges().maximumApples(2000, 701, new int[]{}));
        assertEquals(1000, new ApplesAndOranges().maximumApples(2000, 399, new int[]{}));
        assertEquals(1056, new ApplesAndOranges().maximumApples(2000, 236, new int[]{}));
        assertEquals(4, new ApplesAndOranges().maximumApples(10, 5, new int[]{1, 10}));
        assertEquals(1000, new ApplesAndOranges().maximumApples(2000, 1000, new int[]{}));
        assertEquals(3, new ApplesAndOranges().maximumApples(5, 4, new int[]{1,5}));
        assertEquals(1000, new ApplesAndOranges().maximumApples(2000, 2000, new int[]{}));
        assertEquals(2, new ApplesAndOranges().maximumApples(3, 2, new int[]{}));
        assertEquals(5, new ApplesAndOranges().maximumApples(10, 2, new int[]{}));
        assertEquals(1000, new ApplesAndOranges().maximumApples(2000, 500, new int[]{}));
    }

    @Test
    public void test12() {
        int [] info = new int[] {907, 88, 1452, 1539, 1496, 1314, 554, 94, 1327, 1154, 1035, 52, 47, 994, 1454, 1771, 1476, 1693, 729, 6, 539, 443, 755, 1025, 1220, 305, 17, 974, 240, 118, 82, 946, 416, 1328, 762, 1538, 20, 437, 1335, 139, 409, 1258, 572, 58, 323, 61, 1433, 850, 753, 1559, 812, 63, 113, 1449, 254, 242, 375, 389, 773, 961, 1680, 1122, 431, 293, 1263, 454, 1457, 468, 575, 397, 1143, 488, 77, 819, 639, 1661, 1497, 1603, 1418, 38, 1696, 951, 808, 993, 909, 1204, 615, 570, 782, 78, 596, 258, 1628, 967, 1614, 1702, 1443, 546, 188, 830, 95, 1380, 1219, 1560, 490, 828, 585, 972, 680, 1020, 960, 768, 22, 25, 259, 1002, 1463, 697, 1194, 442, 472, 1602, 18, 403, 497, 1306, 1688, 486, 1671, 361, 747, 238, 1188, 226, 439, 790, 173, 1486, 934, 26, 169, 1361, 396, 558, 1262, 1413, 1513, 275, 702, 594, 417, 1226, 1590, 1247, 1730, 1170, 1622, 1271, 1464, 792, 1775, 904, 99, 687, 624, 1046, 858, 1784, 1412, 244, 621, 1344, 132, 301, 135, 988, 741, 1630, 1240, 1343, 1402, 1405, 910, 1018, 523, 1442, 1386, 1114, 838, 1126, 299, 65, 32, 37, 1783, 456, 1078, 793, 1482, 810, 638, 422, 1299, 102, 906, 476, 165, 378, 320, 1357, 785, 475, 1739, 407, 39, 772, 1202, 1121, 479, 1612, 1453, 1430, 689, 627, 1273, 471, 1705, 1608, 391, 1500, 1159, 566, 1235, 1171, 1529, 371, 701, 120, 62, 803, 899, 162, 383, 918, 1370, 1596, 1075, 966, 629, 1289, 1562, 1748, 530, 129, 104, 1421, 1475, 1203, 345, 473, 769, 21, 355, 651, 1517, 1231, 91, 1360, 676, 859, 256, 1229, 1316, 159, 249, 1301, 1745, 1434, 1163, 775, 150, 926, 445, 1326, 1777, 1083, 1403, 1146, 155, 612, 314, 831, 673, 30, 1213, 1211, 1440, 1396, 1425, 1394, 1639, 602, 1637, 316, 1588, 373, 303, 1005, 1187, 29, 1345, 1390, 659, 109, 679, 42, 157, 1334, 777, 206, 1395, 1193, 1684, 1123, 441, 839, 601, 1320, 53, 1200, 1568, 634, 458, 978, 1292, 1151, 871, 281, 1717, 328, 1780, 55, 1600, 263, 935, 1026, 1131, 265, 1108, 34, 168, 368, 990, 48, 500, 1164, 1135, 1675, 698, 893, 390, 435, 1591, 324, 953, 571, 506, 1726, 809, 1785, 1230, 49, 336, 610, 1199, 1107, 616, 1779, 1534, 1245, 268, 1736, 720, 1477, 1358, 1686, 544, 745, 446, 1134, 721, 865, 1485, 1168, 1528, 1192, 236, 153, 666, 1248, 343, 1139, 1458, 346, 578, 949, 855, 682, 842, 1516, 1721, 922, 247, 984, 79, 16, 735, 903, 496, 852, 630, 399, 1364, 1321, 1350, 1636, 724, 837, 1526, 1352, 1086, 1743, 1333, 204, 654, 1714, 1752, 1385, 681, 1594, 267, 823, 705, 1329, 636, 3, 1223, 80, 453, 801, 332, 628, 1302, 1119, 1156, 956, 535, 1707, 1027, 278, 1003, 1296, 297, 432, 1004, 1782, 647, 891, 1624, 233, 556, 1037, 786, 1290, 1436, 692, 1291, 143, 1141, 27, 1124, 1756, 884, 1322, 1510, 1593, 1058, 940, 987, 699, 531, 1224, 1256, 51, 1278, 1604, 1571, 1699, 326, 520, 76, 1460, 1182, 1759, 1414, 245, 1727, 912, 304, 818, 1597, 1685, 1359} ;
        assertEquals(1009, new ApplesAndOranges().maximumApples(1792, 1137, info));
    }
}
